{"ast":null,"code":"var _jsxFileName = \"/Users/reijiyasuda/dev/dapps/udemy-blockchain-app/client/src/context/TransactionContext.js\",\n  _s = $RefreshSig$();\n//contextフォルダではそれぞれのコンポーネントに直接アクセスできるような処理が書かれている\n//UdemyではJsonPpcProviderのところは本当はethersだが何故か使えなかったので変換した\nimport { JsonRpcProvider } from \"ethers\"; //ether.jsというライブラリ→インストールする必要がある\nimport { contractABI, contractAddress } from \"../utils/connect\";\nimport { createContext, useEffect, useState } from \"react\";\n//window.ethereum==Metamask\n//ホームページのボタンな度に連携するためのcontextを書いていく\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext(); //createContext関数をreactから呼び出す\n//スマートコントラクトと連携する作業\n//スマートコントラクトの取得\n\nconst {\n  ethereum\n} = window; //分割代入(これ以降はethereumだけで使うことができる)\n\nconst getSmartContract = () => {\n  const provider = new JsonRpcProvider.Web3Provider(ethereum); //公式ドキュメントに用意されている\n  const signer = provider.getSigner();\n  const transactionContract = new JsonRpcProvider.Contract(contractAddress, contractABI, signer);\n  return transactionContract;\n};\nexport const TransactionProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  //自分のアカウントを格納するための変数 currentAcount\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  //フォームの値を格納するための箱\n  const [inputFormData, setInputFormData] = useState({\n    // 誰に通貨を送るのか\n    //HTMLのnameを参照している\n    addressTo: \"\",\n    //料金\n    amount: \"\"\n  });\n  //input属性が多い時にname属性も増えるのでそこの指定を簡単にできるような書き方\n  const handleChange = (e /*event*/, name) => {\n    //reactに関する内容\n    setInputFormData(prevInputFormData => ({\n      //入力された時の値の更新するための記述がこの中に書かれている\n      ...prevInputFormData,\n      //スプレッド構文\n      [name]: e.target.value\n    }));\n  };\n  const checkMetamaskWalletConnected = async () => {\n    //メタマスクウォレットと連携できているのかの確認(メタマスクログイン時のパスワード入力によってログインできているかどうか判断する)\n    if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n    //メタマスクのアカウント持っているならそのメタマスクのアカウントのウィレットIDを取得しよう\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n    console.log(accounts);\n  };\n\n  //上記の処理をボタンからできるようにする処理\n  //サイトの連携ボタンからウォレット連携する関数を作る\n  const connectWallet = async () => {\n    if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n    //メタマスクをもっていればアカウントとの接続を開始する。\n    const accounts = await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    //自分のアカウントを状態変数として持っておきましょうということ(送るために)\n    console.log(accounts[0]);\n    setCurrentAccount(accounts[0]);\n  };\n\n  //実際に通貨のやり取りをする\n  const sendTransaction = async () => {\n    if (!ethereum) return alert(\"メタマスクをインストールしてください\"); //毎回インストールされてなかった時のために確認する\n    console.log(\"sendTransaction\");\n    const {\n      addressTo,\n      amount\n    } = inputFormData;\n    const transactionContract = getSmartContract(); //儀式だと思っている\n    //イーサで使うために変形してくれるための宣言(ether.jsライブラリ)\n    const parsedAmount = JsonRpcProvider.utils.parseEther(amount);\n    //送るためのデータの設定\n    const transactionParameters = {\n      gas: \"0x2710\",\n      //16進数で設定\n      from: currentAccount,\n      //この二つは入力フォームから取る必要がある\n      value: parsedAmount,\n      to: addressTo._hex //._/hexで16進数に変換している\n    };\n    //送るための記述(metamaskからとってきたudemyでは)しかし自分がUdemyを受けた時期にはその記述はなくなっていて変な記述になっていたためあまり詳しくわからない\n    const txhash = await ethereum.request({\n      method: \"eth_sendTransaction\",\n      //metamask側で決めたメソッド\n      params: [transactionParameters]\n    });\n    const transactionHash = await transactionContract.addToBlockChain(addressTo, parsedAmount);\n    console.log(`ロード中...${transactionHash.hash}`);\n    await transactionHash.wait(); //waitを呼ばないと下記のlogが出てこない\n    console.log(`送金に成功!${transactionHash.hash}`);\n  };\n\n  //第二引数が空なので(変数)ページ更新した時に一回だけ情報が更新される\n  useEffect(() => {\n    checkMetamaskWalletConnected();\n  }, []);\n\n  //Main.jsに渡す\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      sendTransaction,\n      handleChange,\n      inputFormData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this)\n  //childrenはいつでも呼び出すことができるという指定\n  ;\n};\n_s(TransactionProvider, \"e3VFQwnaACW7IBwIiZTbrCYMIJI=\");\n_c = TransactionProvider;\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["JsonRpcProvider","contractABI","contractAddress","createContext","useEffect","useState","jsxDEV","_jsxDEV","TransactionContext","ethereum","window","getSmartContract","provider","Web3Provider","signer","getSigner","transactionContract","Contract","TransactionProvider","_ref","_s","children","currentAccount","setCurrentAccount","inputFormData","setInputFormData","addressTo","amount","handleChange","e","name","prevInputFormData","target","value","checkMetamaskWalletConnected","alert","accounts","request","method","console","log","connectWallet","sendTransaction","parsedAmount","utils","parseEther","transactionParameters","gas","from","to","_hex","txhash","params","transactionHash","addToBlockChain","hash","wait","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/reijiyasuda/dev/dapps/udemy-blockchain-app/client/src/context/TransactionContext.js"],"sourcesContent":["//contextフォルダではそれぞれのコンポーネントに直接アクセスできるような処理が書かれている\n//UdemyではJsonPpcProviderのところは本当はethersだが何故か使えなかったので変換した\nimport { JsonRpcProvider } from \"ethers\";//ether.jsというライブラリ→インストールする必要がある\nimport {contractABI, contractAddress} from \"../utils/connect\";\nimport { createContext, useEffect, useState } from \"react\";\n//window.ethereum==Metamask\n//ホームページのボタンな度に連携するためのcontextを書いていく\nexport const TransactionContext = createContext();//createContext関数をreactから呼び出す\n//スマートコントラクトと連携する作業\n//スマートコントラクトの取得\n\nconst { ethereum }=window;//分割代入(これ以降はethereumだけで使うことができる)\n\nconst getSmartContract=()=>{\n    const provider = new JsonRpcProvider.Web3Provider(ethereum)//公式ドキュメントに用意されている\n    const signer = provider.getSigner();\n    const transactionContract = new JsonRpcProvider.Contract(\n        contractAddress,\n        contractABI,\n        signer\n    );\n    return transactionContract;\n};\n\nexport const TransactionProvider =({children})=>{\n    //自分のアカウントを格納するための変数 currentAcount\n    const [currentAccount,setCurrentAccount]=useState(\"\");\n    //フォームの値を格納するための箱\n    const[inputFormData, setInputFormData]=useState({\n        // 誰に通貨を送るのか\n        //HTMLのnameを参照している\n        addressTo: \"\",\n        //料金\n        amount: \"\",\n    });\n    //input属性が多い時にname属性も増えるのでそこの指定を簡単にできるような書き方\n    const handleChange=(e/*event*/, name) =>{//reactに関する内容\n        setInputFormData((prevInputFormData)=>({//入力された時の値の更新するための記述がこの中に書かれている\n            ...prevInputFormData,//スプレッド構文\n            [name]: e.target.value,\n        }));\n    };\n\n    const checkMetamaskWalletConnected=async() =>{\n        //メタマスクウォレットと連携できているのかの確認(メタマスクログイン時のパスワード入力によってログインできているかどうか判断する)\n        if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n        //メタマスクのアカウント持っているならそのメタマスクのアカウントのウィレットIDを取得しよう\n        const accounts = await ethereum.request({method: \"eth_accounts\"});\n        console.log(accounts);\n    };\n\n\n    //上記の処理をボタンからできるようにする処理\n    //サイトの連携ボタンからウォレット連携する関数を作る\n    const connectWallet= async ()=>{\n        if(!ethereum) return alert(\"メタマスクをインストールしてください\");\n        //メタマスクをもっていればアカウントとの接続を開始する。\n        const accounts = await ethereum.request({method: \"eth_requestAccounts\"});\n        //自分のアカウントを状態変数として持っておきましょうということ(送るために)\n        console.log(accounts[0]);\n        setCurrentAccount(accounts[0]);\n    };\n\n    //実際に通貨のやり取りをする\n    const sendTransaction=async () => {\n        if(!ethereum) return alert(\"メタマスクをインストールしてください\");//毎回インストールされてなかった時のために確認する\n        console.log(\"sendTransaction\");\n        const {addressTo,amount}=inputFormData;\n        const transactionContract = getSmartContract();//儀式だと思っている\n        //イーサで使うために変形してくれるための宣言(ether.jsライブラリ)\n        const parsedAmount=JsonRpcProvider.utils.parseEther(amount)\n        //送るためのデータの設定\n        const transactionParameters={\n            gas: \"0x2710\",//16進数で設定\n            from: currentAccount,\n            //この二つは入力フォームから取る必要がある\n            value: parsedAmount,\n            to: addressTo._hex,//._/hexで16進数に変換している\n        };\n        //送るための記述(metamaskからとってきたudemyでは)しかし自分がUdemyを受けた時期にはその記述はなくなっていて変な記述になっていたためあまり詳しくわからない\n        const txhash=await ethereum.request({\n            method: \"eth_sendTransaction\",//metamask側で決めたメソッド\n            params: [transactionParameters],\n        });\n        const transactionHash = await transactionContract.addToBlockChain(\n            addressTo,\n            parsedAmount,\n        );\n        console.log(`ロード中...${transactionHash.hash}`);\n        await transactionHash.wait();//waitを呼ばないと下記のlogが出てこない\n        console.log(`送金に成功!${transactionHash.hash}`);\n    };\n\n    //第二引数が空なので(変数)ページ更新した時に一回だけ情報が更新される\n    useEffect(()=>{\n        \n        checkMetamaskWalletConnected();\n    },[]);\n    \n    //Main.jsに渡す\n    return(\n        <TransactionContext.Provider value={{ connectWallet, sendTransaction, handleChange, inputFormData }}>\n            {children}\n        </TransactionContext.Provider>\n        //childrenはいつでも呼び出すことができるという指定\n    );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}