{"ast":null,"code":"var _jsxFileName = \"/Users/reijiyasuda/dev/dapps/udemy-blockchain-app/client/src/context/TransactionContext.js\",\n  _s = $RefreshSig$();\n//contextフォルダではそれぞれのコンポーネントに直接アクセスできるような処理が書かれている\n\nimport { JsonRpcProvider } from \"ethers\"; //ether.jsというライブラリ→インストールする必要がある\nimport { contractABI, contractAddress } from \"../utils/connect\";\nimport { createContext, useEffect } from \"react\";\n//window.ethereum==Metamask\n//ホームページのボタンな度に連携するためのcontextを書いていく\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext(); //createContext関数をreactから呼び出す\n//スマートコントラクトと連携する作業\n//スマートコントラクトの取得\n\nconst {\n  ethereum\n} = window; //分割代入(これ以降はethereumだけで使うことができる)\n\nconst getSmartContract = () => {\n  const provider = new JsonRpcProvider.providers.Web3Provider(ethereum); //公式ドキュメントに用意されている\n  const signer = provider.getSigner();\n  const transactionContract = new JsonRpcProvider.Contract(contractAddress, contractABI, signer);\n  return transactionContract;\n};\nexport const TransactionProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const checkMetamaskWalletConnected = async () => {\n    //メタマスクウォレットと連携できているのかの確認(メタマスクログイン時のパスワード入力によってログインできているかどうか判断する)\n    if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n    //メタマスクのアカウント持っているならそのメタマスクのアカウントのウィレットIDを取得しよう\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n    console.log(accounts);\n  };\n\n  //第二引数が空なので(変数)ページ更新した時にだけ情報が更新される\n  useEffect(() => {\n    checkMetamaskWalletConnected();\n  }, []);\n\n  //ウォレット連携する関数を作る\n\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      name: \"Reiji Yasuda\"\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this)\n  //childrenはいつでも呼び出すことができるという指定\n  ;\n};\n_s(TransactionProvider, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = TransactionProvider;\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["JsonRpcProvider","contractABI","contractAddress","createContext","useEffect","jsxDEV","_jsxDEV","TransactionContext","ethereum","window","getSmartContract","provider","providers","Web3Provider","signer","getSigner","transactionContract","Contract","TransactionProvider","_ref","_s","children","checkMetamaskWalletConnected","alert","accounts","request","method","console","log","Provider","value","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/reijiyasuda/dev/dapps/udemy-blockchain-app/client/src/context/TransactionContext.js"],"sourcesContent":["//contextフォルダではそれぞれのコンポーネントに直接アクセスできるような処理が書かれている\n\nimport { JsonRpcProvider } from \"ethers\";//ether.jsというライブラリ→インストールする必要がある\nimport {contractABI, contractAddress} from \"../utils/connect\";\nimport { createContext, useEffect } from \"react\";\n//window.ethereum==Metamask\n//ホームページのボタンな度に連携するためのcontextを書いていく\nexport const TransactionContext = createContext();//createContext関数をreactから呼び出す\n//スマートコントラクトと連携する作業\n//スマートコントラクトの取得\n\nconst { ethereum }=window;//分割代入(これ以降はethereumだけで使うことができる)\n\nconst getSmartContract=()=>{\n    const provider = new JsonRpcProvider.providers.Web3Provider(ethereum)//公式ドキュメントに用意されている\n    const signer = provider.getSigner();\n    const transactionContract = new JsonRpcProvider.Contract(\n        contractAddress,\n        contractABI,\n        signer\n    );\n    return transactionContract;\n};\n\nexport const TransactionProvider =({children})=>{\n    \n    const checkMetamaskWalletConnected=async() =>{\n        //メタマスクウォレットと連携できているのかの確認(メタマスクログイン時のパスワード入力によってログインできているかどうか判断する)\n        if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n        //メタマスクのアカウント持っているならそのメタマスクのアカウントのウィレットIDを取得しよう\n        const accounts = await ethereum.request({method: \"eth_accounts\"});\n        console.log(accounts);\n\n    };\n\n    //第二引数が空なので(変数)ページ更新した時にだけ情報が更新される\n    useEffect(()=>{\n        checkMetamaskWalletConnected();\n    },[]);\n\n    //ウォレット連携する関数を作る\n\n    return(\n        <TransactionContext.Provider value={{name: \"Reiji Yasuda\"}}>\n            {children}\n        </TransactionContext.Provider>\n        //childrenはいつでも呼び出すことができるという指定\n    );\n};"],"mappings":";;AAAA;;AAEA,SAASA,eAAe,QAAQ,QAAQ,CAAC;AACzC,SAAQC,WAAW,EAAEC,eAAe,QAAO,kBAAkB;AAC7D,SAASC,aAAa,EAAEC,SAAS,QAAQ,OAAO;AAChD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,kBAAkB,gBAAGJ,aAAa,CAAC,CAAC,CAAC;AAClD;AACA;;AAEA,MAAM;EAAEK;AAAS,CAAC,GAACC,MAAM,CAAC;;AAE1B,MAAMC,gBAAgB,GAACA,CAAA,KAAI;EACvB,MAAMC,QAAQ,GAAG,IAAIX,eAAe,CAACY,SAAS,CAACC,YAAY,CAACL,QAAQ,CAAC;EACrE,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;EACnC,MAAMC,mBAAmB,GAAG,IAAIhB,eAAe,CAACiB,QAAQ,CACpDf,eAAe,EACfD,WAAW,EACXa,MACJ,CAAC;EACD,OAAOE,mBAAmB;AAC9B,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAEC,IAAA,IAAc;EAAAC,EAAA;EAAA,IAAb;IAACC;EAAQ,CAAC,GAAAF,IAAA;EAEzC,MAAMG,4BAA4B,GAAC,MAAAA,CAAA,KAAU;IACzC;IACA,IAAI,CAACd,QAAQ,EAAE,OAAOe,KAAK,CAAC,oBAAoB,CAAC;IACjD;IACA,MAAMC,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,OAAO,CAAC;MAACC,MAAM,EAAE;IAAc,CAAC,CAAC;IACjEC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAEzB,CAAC;;EAED;EACApB,SAAS,CAAC,MAAI;IACVkB,4BAA4B,CAAC,CAAC;EAClC,CAAC,EAAC,EAAE,CAAC;;EAEL;;EAEA,oBACIhB,OAAA,CAACC,kBAAkB,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAACC,IAAI,EAAE;IAAc,CAAE;IAAAV,QAAA,EACtDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB;EAC7B;EAAA;AAER,CAAC;AAACf,EAAA,CAxBWF,mBAAmB;AAAAkB,EAAA,GAAnBlB,mBAAmB;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}