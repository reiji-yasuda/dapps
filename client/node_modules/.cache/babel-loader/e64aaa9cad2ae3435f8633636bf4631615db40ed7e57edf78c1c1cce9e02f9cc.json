{"ast":null,"code":"var _jsxFileName = \"/Users/reijiyasuda/dev/dapps/udemy-blockchain-app/client/src/context/TransactionContext.js\",\n  _s = $RefreshSig$();\n//contextフォルダではそれぞれのコンポーネントに直接アクセスできるような処理が書かれている\n\nimport { JsonRpcProvider } from \"ethers\"; //ether.jsというライブラリ→インストールする必要がある\nimport { contractABI, contractAddress } from \"../utils/connect\";\nimport { createContext, useEffect, useState } from \"react\";\n//window.ethereum==Metamask\n//ホームページのボタンな度に連携するためのcontextを書いていく\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionContext = /*#__PURE__*/createContext(); //createContext関数をreactから呼び出す\n//スマートコントラクトと連携する作業\n//スマートコントラクトの取得\n\nconst {\n  ethereum\n} = window; //分割代入(これ以降はethereumだけで使うことができる)\n\nconst getSmartContract = () => {\n  const provider = new JsonRpcProvider.providers.Web3Provider(ethereum); //公式ドキュメントに用意されている\n  const signer = provider.getSigner();\n  const transactionContract = new JsonRpcProvider.Contract(contractAddress, contractABI, signer);\n  return transactionContract;\n};\nexport const TransactionProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  //自分のアカウントを保存するための変数\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const checkMetamaskWalletConnected = async () => {\n    //メタマスクウォレットと連携できているのかの確認(メタマスクログイン時のパスワード入力によってログインできているかどうか判断する)\n    if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n    //メタマスクのアカウント持っているならそのメタマスクのアカウントのウィレットIDを取得しよう\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n    console.log(accounts);\n  };\n\n  //上記の処理をボタンからできるようにする処理\n  //サイトの連携ボタンからウォレット連携する関数を作る\n  const connectWallet = async () => {\n    if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n    //メタマスクをもっていればアカウントとの接続を開始する。\n    const accounts = await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    //自分のアカウントを状態変数として持っておきましょうということ(送るために)\n    console.log(accounts[0]);\n    setCurrentAccount(accounts[0]);\n  };\n\n  //実際に通貨のやり取りをする\n  const sendTransaction = async () => {\n    if (!ethereum) return alert(\"メタマスクをインストールしてください\"); //毎回インストールされてなかった時のために確認する\n    console.log(\"sendTransaction\");\n  };\n\n  //第二引数が空なので(変数)ページ更新した時に一回だけ情報が更新される\n  useEffect(() => {\n    checkMetamaskWalletConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionContext.Provider, {\n    value: {\n      connectWallet,\n      sendTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this)\n  //childrenはいつでも呼び出すことができるという指定\n  ;\n};\n_s(TransactionProvider, \"bF8Vq3LxJj1+1XJf1j05jHjcGVo=\");\n_c = TransactionProvider;\nvar _c;\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["JsonRpcProvider","contractABI","contractAddress","createContext","useEffect","useState","jsxDEV","_jsxDEV","TransactionContext","ethereum","window","getSmartContract","provider","providers","Web3Provider","signer","getSigner","transactionContract","Contract","TransactionProvider","_ref","_s","children","currentAccount","setCurrentAccount","checkMetamaskWalletConnected","alert","accounts","request","method","console","log","connectWallet","sendTransaction","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/reijiyasuda/dev/dapps/udemy-blockchain-app/client/src/context/TransactionContext.js"],"sourcesContent":["//contextフォルダではそれぞれのコンポーネントに直接アクセスできるような処理が書かれている\n\nimport { JsonRpcProvider } from \"ethers\";//ether.jsというライブラリ→インストールする必要がある\nimport {contractABI, contractAddress} from \"../utils/connect\";\nimport { createContext, useEffect, useState } from \"react\";\n//window.ethereum==Metamask\n//ホームページのボタンな度に連携するためのcontextを書いていく\nexport const TransactionContext = createContext();//createContext関数をreactから呼び出す\n//スマートコントラクトと連携する作業\n//スマートコントラクトの取得\n\nconst { ethereum }=window;//分割代入(これ以降はethereumだけで使うことができる)\n\nconst getSmartContract=()=>{\n    const provider = new JsonRpcProvider.providers.Web3Provider(ethereum)//公式ドキュメントに用意されている\n    const signer = provider.getSigner();\n    const transactionContract = new JsonRpcProvider.Contract(\n        contractAddress,\n        contractABI,\n        signer\n    );\n    return transactionContract;\n};\n\nexport const TransactionProvider =({children})=>{\n    //自分のアカウントを保存するための変数\n    const [currentAccount,setCurrentAccount]=useState(\"\");\n    const checkMetamaskWalletConnected=async() =>{\n        //メタマスクウォレットと連携できているのかの確認(メタマスクログイン時のパスワード入力によってログインできているかどうか判断する)\n        if (!ethereum) return alert(\"メタマスクをインストールしてください\");\n        //メタマスクのアカウント持っているならそのメタマスクのアカウントのウィレットIDを取得しよう\n        const accounts = await ethereum.request({method: \"eth_accounts\"});\n        console.log(accounts);\n    };\n\n\n    //上記の処理をボタンからできるようにする処理\n    //サイトの連携ボタンからウォレット連携する関数を作る\n    const connectWallet= async ()=>{\n        if(!ethereum) return alert(\"メタマスクをインストールしてください\");\n        //メタマスクをもっていればアカウントとの接続を開始する。\n        const accounts = await ethereum.request({method: \"eth_requestAccounts\"});\n        //自分のアカウントを状態変数として持っておきましょうということ(送るために)\n        console.log(accounts[0]);\n        setCurrentAccount(accounts[0]);\n    };\n\n    //実際に通貨のやり取りをする\n    const sendTransaction=async () => {\n        if(!ethereum) return alert(\"メタマスクをインストールしてください\");//毎回インストールされてなかった時のために確認する\n        console.log(\"sendTransaction\");\n    };\n\n    //第二引数が空なので(変数)ページ更新した時に一回だけ情報が更新される\n    useEffect(()=>{\n        checkMetamaskWalletConnected();\n    },[]);\n    \n    return(\n        <TransactionContext.Provider value={{ connectWallet, sendTransaction }}>\n            {children}\n        </TransactionContext.Provider>\n        //childrenはいつでも呼び出すことができるという指定\n    );\n};"],"mappings":";;AAAA;;AAEA,SAASA,eAAe,QAAQ,QAAQ,CAAC;AACzC,SAAQC,WAAW,EAAEC,eAAe,QAAO,kBAAkB;AAC7D,SAASC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,kBAAkB,gBAAGL,aAAa,CAAC,CAAC,CAAC;AAClD;AACA;;AAEA,MAAM;EAAEM;AAAS,CAAC,GAACC,MAAM,CAAC;;AAE1B,MAAMC,gBAAgB,GAACA,CAAA,KAAI;EACvB,MAAMC,QAAQ,GAAG,IAAIZ,eAAe,CAACa,SAAS,CAACC,YAAY,CAACL,QAAQ,CAAC;EACrE,MAAMM,MAAM,GAAGH,QAAQ,CAACI,SAAS,CAAC,CAAC;EACnC,MAAMC,mBAAmB,GAAG,IAAIjB,eAAe,CAACkB,QAAQ,CACpDhB,eAAe,EACfD,WAAW,EACXc,MACJ,CAAC;EACD,OAAOE,mBAAmB;AAC9B,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAEC,IAAA,IAAc;EAAAC,EAAA;EAAA,IAAb;IAACC;EAAQ,CAAC,GAAAF,IAAA;EACzC;EACA,MAAM,CAACG,cAAc,EAACC,iBAAiB,CAAC,GAACnB,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAMoB,4BAA4B,GAAC,MAAAA,CAAA,KAAU;IACzC;IACA,IAAI,CAAChB,QAAQ,EAAE,OAAOiB,KAAK,CAAC,oBAAoB,CAAC;IACjD;IACA,MAAMC,QAAQ,GAAG,MAAMlB,QAAQ,CAACmB,OAAO,CAAC;MAACC,MAAM,EAAE;IAAc,CAAC,CAAC;IACjEC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EACzB,CAAC;;EAGD;EACA;EACA,MAAMK,aAAa,GAAE,MAAAA,CAAA,KAAU;IAC3B,IAAG,CAACvB,QAAQ,EAAE,OAAOiB,KAAK,CAAC,oBAAoB,CAAC;IAChD;IACA,MAAMC,QAAQ,GAAG,MAAMlB,QAAQ,CAACmB,OAAO,CAAC;MAACC,MAAM,EAAE;IAAqB,CAAC,CAAC;IACxE;IACAC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxBH,iBAAiB,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClC,CAAC;;EAED;EACA,MAAMM,eAAe,GAAC,MAAAA,CAAA,KAAY;IAC9B,IAAG,CAACxB,QAAQ,EAAE,OAAOiB,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACjDI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAClC,CAAC;;EAED;EACA3B,SAAS,CAAC,MAAI;IACVqB,4BAA4B,CAAC,CAAC;EAClC,CAAC,EAAC,EAAE,CAAC;EAEL,oBACIlB,OAAA,CAACC,kBAAkB,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEH,aAAa;MAAEC;IAAgB,CAAE;IAAAX,QAAA,EAClEA;EAAQ;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB;EAC7B;EAAA;AAER,CAAC;AAAClB,EAAA,CAxCWF,mBAAmB;AAAAqB,EAAA,GAAnBrB,mBAAmB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}